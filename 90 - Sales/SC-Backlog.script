PRINT 'Processing New Record'
PRINT [Level(Sales Order.Sales Order).Sales Order Key] + ':' + [Invoice.SI Reference SO Key] + ':' + [Grain(SC-Orders SL Update).Sales Order ScL Line] + ':' + [Level(Sales Order.Sales Order).SO Item Overall Status] + ':ScL Qty-' + SUM([Grain(SC-Orders SL Update).Order Qty]) + ':InvQty-' + SUM([Invoice.Invoice Qty])+ ':OrdQty-' + [SC-Orders for Backlog Condensed.VBAP Quantity]
PRINT 'Order: ' + [Grain(SC-Orders SL Update).Sales Order Number] + ' Item: ' + [Grain(SC-Orders SL Update).Sales Order Item] + ' ScL: ' + [Grain(SC-Orders SL Update).Sales Order ScL Line]
PRINT 'Order: ' + [Grain(SC-Orders SL Update).# RecType]

DIM [vOrdKey] AS VARCHAR(16)
DIM [vPrevKey] AS VARCHAR(16) = NULL
DIM [vInvRemain] AS FLOAT
DIM [vOrdQty] AS FLOAT
DIM [vInvQty] AS FLOAT
DIM [vSchedQty] AS FLOAT
DIM [vWriteRecord] AS VARCHAR(1)
Dim [vExRateHCtoGC] as Float
Dim [vExRateHCtoRC] as Float
Dim [vExRateDCtoHC] as Float
Dim [vBacklogIntakeDC] as Float

[vWriteRecord] = ''
[vOrdKey] = [Grain(SC-Orders SL Update).Sales Order Number] + '' + [Grain(SC-Orders SL Update).Sales Order Item]
[vSchedQty] = SUM([Grain(SC-Orders SL Update).Order Qty])
[vOrdQty] = [SC-Orders for Backlog Condensed.VBAP Quantity]
PRINT 'Order Key ' + [vOrdKey]
PRINT 'Order Qty ' + [SC-Orders for Backlog Condensed.VBAP Quantity]
PRINT 'Order Net DC ' + SUM([Grain(SC-Orders SL Update).Order Intake DC])
PRINT 'Invoice Qty ' + SUM([Invoice.Invoice Qty])
[vBacklogIntakeDC] = 0.00

[Sales Order Number] = [Grain(SC-Orders SL Update).Sales Order Number]
[Sales Order Item] = [Grain(SC-Orders SL Update).Sales Order Item]
[Sales Order ScL Line] = [Grain(SC-Orders SL Update).Sales Order ScL Line]
[SO Date] = [Level(Sales Order.Sales Order).SO Date]
[SO Document Category] = [Level(Sales Order.Sales Order).SO Document Category]
[SO Transaction Group] = [Level(Sales Order.Sales Order).SO Transaction Group]
[SO Document Type] = [Level(Sales Order.Sales Order).SO Document Type]
[Sales Org Key] = [Grain(SC-Orders SL Update).Sales Org Key]
[Distr Channel] = [Level(Sales Order.Sales Order).Distr Channel]
//[Sales Office Key]=[Grain(SC-Orders SL Update).Sales Office Key]
[Customer Key] = [Grain(SC-Orders SL Update).Customer Key]
[SO Header Change Date] = [Level(Sales Order.Sales Order).SO Header Change Date]
[Item Key] = [Grain(SC-Orders SL Update).Item Key]
[Item category] = [Level(Sales Order.Sales Order).Item category]
[Rejection Reason Key] = [Grain(SC-Orders SL Update).Rejection Reason Key]
[Base Unit] = [Level(Sales Order.Sales Order).Base Unit]
[Division Key] = [Grain(SC-Orders SL Update).Division Key]
[Plant] = [Level(Sales Order.Sales Order).Plant]
//[SO Item Cost]=[Grain(SC-Orders SL Update).SO Item Cost]
[Currency Key DC] = [Level(Sales Order.Sales Order).Currency Key DC]
[Ex Rate DC] = [Level(Sales Order.Sales Order).Ex Rate DC]
[Currency Key GC] = [Level(Sales Order.Sales Order).Currency Key GC]
[Ex Rate GC] = [Level(Sales Order.Sales Order).Ex Rate GC]
[Currency Key HC] = [Level(Sales Order.Sales Order).Currency Key HC]
[Ex Rate HC] = [Level(Sales Order.Sales Order).Ex Rate HC]
//[Analysis Date]=[Grain(SC-Orders SL Update).Analysis Date]
[Analysis Date] = NOWDATE
[Pricing Date] = [Level(Sales Order.Sales Order).Pricing Date]
[Sales Order Key] = [Level(Sales Order.Sales Order).Sales Order Key]
[Current Record] = [Level(Sales Order.Sales Order).Current Record]
[CustArea Key] = [Grain(SC-Orders SL Update).CustArea Key]
[SO Item Delivery Status] = [Level(Sales Order.Sales Order).SO Item Delivery Status]
[SO Order Delivery Status] = [Level(Sales Order.Sales Order).SO Order Delivery Status]
[SO Item Rejection Status] = [Level(Sales Order.Sales Order).SO Item Rejection Status]
[SO Item Overall Status] = [Level(Sales Order.Sales Order).SO Item Overall Status]
[Change Date] = [Level(Sales Order.Sales Order).Change Date]
[DelMarker] = [Level(Sales Order.Sales Order).DelMarker]
[Source] = [Level(Sales Order.Sales Order).Source]
[Requirement Type Key] = [Level(Sales Order.Sales Order).Requirement Type Key]
[Object Number] = [Level(Sales Order.Sales Order).Object Number]
[Comp Code Key] = [Grain(SC-Orders SL Update).Comp Code Key]
[ScL Delivery Date] = [Level(Sales Order.Sales Order).ScL Delivery Date]
[ScL Category] = [Level(Sales Order.Sales Order).ScL Category]
[ScL Type] = [Level(Sales Order.Sales Order).ScL Type]
[ScL Requirement Type] = [Level(Sales Order.Sales Order).ScL Requirement Type]
[ScL Quantity] = SUM([Level(Sales Order.Sales Order).ScL Quantity])
[SO Doc Condition] = [Level(Sales Order.Sales Order).SO Doc Condition]
[Delivery Customer Key] = [Grain(SC-Orders SL Update).Delivery Customer Key]
[Security Key] = [Grain(SC-Orders SL Update).Security Key]
[Currency Key RC] = [Level(Sales Order.Sales Order).Currency Key RC]
[Ex Rate RC] = [Level(Sales Order.Sales Order).Ex Rate RC]
[RecType] = 'Backlog' //[Level(Sales Order.Sales Order).RecType]
//HUB-660 - add goods issue date for shipping backlog
// [ScL Goods Issue Date] = [VBUP.VBEP_WADAT]
[Billing Date] = [SC-Orders for Backlog Condensed.VBKD_FKDAT]
IF [SC-Orders for Backlog Condensed.VBKD_FKDAT] is null then
	print 'ERROR: FKDAT is null'
END IF
// Backlog specific fields
[Backlog Trigger] = [SC-Orders for Backlog Condensed.Order Source]
/*
If order Qty NULL means no order line data for this schedule line (theoretically shouldn't happen...)
*/


[vExRateHCtoGC] = 1
IF [Level(Sales Order.Sales Order).Currency Key HC] <> 'CHF' THEN
  IF [HCRate.Exchange Rate] IS NOT NULL THEN
    [vExRateHCtoGC] = [HCRate.Exchange Rate]
  ELSE
    [vExRateHCtoGC] = 1
    PRINT 'ERROR: Determining Ex Rate for HC to CHF: RATE FOR vExRateHCtoCHF '+[Level(Sales Order.Sales Order).Currency Key HC]+' NOT FOUND - SET TO 1'
  END IF
END IF

[vExRateDCtoHC] = 1
IF ([Level(Sales Order.Sales Order).Currency Key DC] <> [Level(Sales Order.Sales Order).Currency Key HC]) THEN
  IF [Level(Sales Order.Sales Order).Currency Key DC] <> 'CHF'  THEN
	  IF [DCRate.Exchange Rate] IS NOT NULL and [Level(Sales Order.Sales Order).Currency Key DC] is not null THEN
	    [vExRateDCtoHC] = [DCRate.Exchange Rate] / [vExRateHCtoGC]
	  ELSEIF [Level(Sales Order.Sales Order).Currency Key DC] is null THEN
	    [vExRateDCtoHC] = 1
	  ELSE
	    PRINT 'ERROR: Determining Ex Rate for DC to HC: RATE FOR vExRateDCtoHC '+[Level(Sales Order.Sales Order).Currency Key DC]+' NOT FOUND - SET TO 1'
	  END IF
  END IF
END IF

[vExRateHCtoRC] = 1
IF [Level(Sales Order.Sales Order).Currency Key RC] <> 'CHF' THEN
  IF [RCRate.Exchange Rate] IS NOT NULL THEN
    [vExRateHCtoRC] = [RCRate.Exchange Rate] / [vExRateHCtoGC]
  ELSE
    [vExRateHCtoRC] = 1
    PRINT 'ERROR: Determining Ex Rate for RC to CHF: RATE FOR vExRateRCtoCHF '+[Level(Sales Order.Sales Order).Currency Key RC]+' NOT FOUND - SET TO 1'
  END IF
END IF

IF [Level(Sales Order.Sales Order).Currency Key DC] is not null then
	print 'Ex Rates' + ':' + [Level(Sales Order.Sales Order).Currency Key DC] + ':' + [DCRate.Exchange Rate] + ':' + [vExRateDCtoHC] + ':' + [Level(Sales Order.Sales Order).Currency Key HC] + ':' + [HCRate.Exchange Rate] + ':' + [vExRateHCtoGC] + ':' + [Level(Sales Order.Sales Order).Currency Key RC] + ':' + [RCRate.Exchange Rate] + ':' + [vExRateHCtoRC]
ELSE
	print 'Ex Rates' + ':' + [Level(Sales Order.Sales Order).Source] + ' Order:' + SUM([Grain(SC-Orders SL Update).Order Intake DC]) + ':' + [Level(Sales Order.Sales Order).Currency Key HC] + ':' + [HCRate.Exchange Rate] + ':' + [vExRateHCtoGC] + ':' + [Level(Sales Order.Sales Order).Currency Key RC] + ':' + [RCRate.Exchange Rate] + ':' + [vExRateHCtoRC]
END IF

IF SUM([Grain(SC-Orders SL Update).Order Qty]) IS NOT NULL THEN 
   IF [vSchedQty] IS NULL THEN 
      [vSchedQty] = 0.0
   END IF
   IF [vPrevKey] IS NOT NULL THEN 
      PRINT '[vPrevKey] is not null'
      PRINT 'vKey:' + [vOrdKey] + ' pKey:' + [vPrevKey]
      PRINT 'Sch Line:' + [Grain(SC-Orders SL Update).Sales Order ScL Line] + ' Sch Qty:' + [vSchedQty]
/* Still the same Order Line ? */
      IF [vPrevKey] = [vOrdKey] THEN 
         PRINT '[vPrevKey] is equal to [vOrdKey]'
         PRINT 'vInvQty:' + [vInvQty] + ' vOrdQty:' + [vOrdQty]
         PRINT 'vInvRemain:' + [vInvRemain] + ' Grain(Schedule Line Qty):' + [vSchedQty]
         IF [vInvRemain] IS NULL THEN 
            [vInvRemain] = 0.0
         END IF
         IF [vInvRemain] >= [vSchedQty] THEN 
            PRINT '[vPrevKey] is not null, [vPrevKey] = [vOrdKey] and [vInvRemain] >= [vSchedQty]'
            PRINT 'Updating backlog as :0'
            [Backlog Qty] = 0.0
            [vInvRemain] = ([vInvRemain] - [vSchedQty])
            [Backlog Intake DC] = 0.0
            [Backlog Intake GC] = 0.0
            [Backlog Intake HC] = 0.0
            [Backlog Intake RC] = 0.0
         ELSE 
            PRINT '[vPrevKey] is not null, [vPrevKey] = [vOrdKey] and [vInvRemain] < [vSchedQty]'
            PRINT 'Updating backlog as :' + ([vSchedQty] - [vInvRemain])
            PRINT 'Factor for Order value calculation: ' + (([vSchedQty] - [vInvRemain]) / [vOrdQty])
            PRINT 'Order Intake DC: ' + SUM([Grain(SC-Orders SL Update).Order Intake DC])

            [vBacklogIntakeDC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake DC])) 
            PRINT 'Backlog Intake DC: ' + [vBacklogIntakeDC]

            [Backlog Qty] = [vSchedQty] - [vInvRemain]

            [vWriteRecord] = 'X'
            [vInvRemain] = 0.0
            IF SUM([Grain(SC-Orders SL Update).Order Intake DC]) <> 0.00 THEN
	            [Backlog Intake DC] = [vBacklogIntakeDC] 
	            [Backlog Intake GC] = [vBacklogIntakeDC] *  [vExRateDCtoHC] * [vExRateHCtoGC]
	            [Backlog Intake HC] = [vBacklogIntakeDC] *  [vExRateDCtoHC]
	            [Backlog Intake RC] = [vBacklogIntakeDC] *  [vExRateDCtoHC] * [vExRateHCtoRC]
	        ELSE
	        PRINT 'WARN: No Order Intake DC, so using HC'
	            [Backlog Intake GC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake HC])) *  [vExRateHCtoGC]
	            [Backlog Intake HC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake HC])) 
	            [Backlog Intake RC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake HC])) *  [vExRateDCtoHC] * [vExRateHCtoRC]
	        END IF
         END IF
      ELSE 
         PRINT '[vPrevKey] is not equal to [vOrdKey]'
         [vInvRemain] = SUM([Invoice.Invoice Qty])
         [vInvQty] = SUM([Invoice.Invoice Qty])
         PRINT 'vInvQty:' + [vInvQty] + ' vOrdQty:' + [vOrdQty]
         PRINT 'vInvRemain:' + [vInvRemain] + ' Grain(Schedule Line Qty):' + [vSchedQty]
         IF [vInvRemain] IS NULL THEN 
            [vInvRemain] = 0.0
         END IF
         IF [vInvRemain] >= [vSchedQty] THEN 
            PRINT '[vPrevKey] is not null, [vPrevKey] <> [vOrdKey] and [vInvRemain] >= [vSchedQty]'
            PRINT 'Updating Backlog as :0'
            [Backlog Qty] = 0.0
            [vInvRemain] = ([vInvRemain] - [vSchedQty])
            [Backlog Intake DC] = 0.0
            [Backlog Intake GC] = 0.0
            [Backlog Intake HC] = 0.0
            [Backlog Intake RC] = 0.0
         ELSE 
            PRINT '[vPrevKey] is not null, [vPrevKey] <> [vOrdKey] and [vInvRemain] < [vSchedQty]'
            PRINT 'Updating backlog as :' + ([vSchedQty] - [vInvRemain])
            PRINT 'Factor for Order value calculation: ' + (([vSchedQty] - [vInvRemain]) / [vOrdQty])
            [Backlog Qty] = [vSchedQty] - [vInvRemain]
            PRINT 'Order Intake DC: ' + SUM([Grain(SC-Orders SL Update).Order Intake DC])

            [vBacklogIntakeDC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake DC])) 
            PRINT 'Backlog Intake DC: ' + [vBacklogIntakeDC]
            
            [vWriteRecord] = 'X'
            [vInvRemain] = 0.0
            IF SUM([Grain(SC-Orders SL Update).Order Intake DC]) <> 0.00 THEN
	            [Backlog Intake DC] = [vBacklogIntakeDC] 
	            [Backlog Intake GC] = [vBacklogIntakeDC] *  [vExRateDCtoHC] * [vExRateHCtoGC]
	            [Backlog Intake HC] = [vBacklogIntakeDC] *  [vExRateDCtoHC]
	            [Backlog Intake RC] = [vBacklogIntakeDC] *  [vExRateDCtoHC] * [vExRateHCtoRC]
	        ELSE
	        	PRINT 'WARN: No Order Intake DC, so using HC'
	            [Backlog Intake GC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake HC])) *  [vExRateHCtoGC]
	            [Backlog Intake HC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake HC])) 
	            [Backlog Intake RC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake HC])) *  [vExRateDCtoHC] * [vExRateHCtoRC]
	        END IF
/*            [Backlog Intake DC] = ((([vSchedQty] - [vInvRemain]) / SUM([Grain(SC-Orders SL Update).Order Qty])) * SUM([Grain(SC-Orders SL Update).Order Intake DC]))
            [Backlog Intake GC] = ((([vSchedQty] - [vInvRemain]) / SUM([Grain(SC-Orders SL Update).Order Qty])) * SUM([Grain(SC-Orders SL Update).Order Intake GC]))
            [Backlog Intake HC] = ((([vSchedQty] - [vInvRemain]) / SUM([Grain(SC-Orders SL Update).Order Qty])) * SUM([Grain(SC-Orders SL Update).Order Intake HC]))
            [Backlog Intake RC] = ((([vSchedQty] - [vInvRemain]) / SUM([Grain(SC-Orders SL Update).Order Qty])) * SUM([Grain(SC-Orders SL Update).Order Intake RC])) */
         END IF
      END IF
   END IF
/* Handle First Record */
   IF [vPrevKey] IS NULL THEN 
      PRINT '[vPrevKey] is null'
      PRINT 'vKey:' + [vOrdKey]
      PRINT 'Sch Line:' + [Grain(SC-Orders SL Update).Sales Order ScL Line] + ' Sch Qty:' + [vSchedQty]
      [vInvRemain] = SUM([Invoice.Invoice Qty])
      [vInvQty] = SUM([Invoice.Invoice Qty])
      PRINT 'vInvQty:' + [vInvQty] + ' vOrdQty:' + [vOrdQty]
      PRINT 'vInvRemain:' + [vInvRemain] + ' Grain(Schedule Line Qty):' + [vSchedQty]
      IF [vInvRemain] IS NULL THEN 
         [vInvRemain] = 0.0
      END IF
      IF [vInvRemain] >= [vSchedQty] THEN 
         [Backlog Qty] = 0.0
         [vInvRemain] = ([vInvRemain] - [vSchedQty])
         [Backlog Intake DC] = 0.0
         [Backlog Intake GC] = 0.0
         [Backlog Intake HC] = 0.0
         [Backlog Intake RC] = 0.0
      ELSE 
         [Backlog Qty] = [vSchedQty] - [vInvRemain]
         print SUM([Grain(SC-Orders SL Update).Order Intake DC]) + ':vSchedQty-' + [vSchedQty] + ':vInvRemain-' + [vInvRemain]
         PRINT 'Factor for Order value calculation: ' + (([vSchedQty] - [vInvRemain]) / [vOrdQty])
         PRINT 'Order Intake DC: ' + SUM([Grain(SC-Orders SL Update).Order Intake DC])
         
         [vBacklogIntakeDC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake DC])) 
         PRINT 'Backlog Intake DC: ' + [vBacklogIntakeDC]
         
         [vWriteRecord] = 'X'
         [vInvRemain] = 0.0
            IF SUM([Grain(SC-Orders SL Update).Order Intake DC]) <> 0.00 THEN
	            [Backlog Intake DC] = [vBacklogIntakeDC] 
	            [Backlog Intake GC] = [vBacklogIntakeDC] *  [vExRateDCtoHC] * [vExRateHCtoGC]
	            [Backlog Intake HC] = [vBacklogIntakeDC] *  [vExRateDCtoHC]
	            [Backlog Intake RC] = [vBacklogIntakeDC] *  [vExRateDCtoHC] * [vExRateHCtoRC]
	        ELSE
	        	PRINT 'WARN: No Order Intake DC, so using HC'
	            [Backlog Intake GC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake HC])) *  [vExRateHCtoGC]
	            [Backlog Intake HC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake HC])) 
	            [Backlog Intake RC] = ((([vSchedQty] - [vInvRemain]) / [vOrdQty]) * SUM([Grain(SC-Orders SL Update).Order Intake HC])) *  [vExRateDCtoHC] * [vExRateHCtoRC]
	        END IF
/*         [Backlog Intake DC] = ((([vSchedQty] - [vInvRemain]) / SUM([Grain(SC-Orders SL Update).Order Qty])) * SUM([Grain(SC-Orders SL Update).Order Intake DC]))
         [Backlog Intake GC] = ((([vSchedQty] - [vInvRemain]) / SUM([Grain(SC-Orders SL Update).Order Qty])) * SUM([Grain(SC-Orders SL Update).Order Intake GC]))
         [Backlog Intake HC] = ((([vSchedQty] - [vInvRemain]) / SUM([Grain(SC-Orders SL Update).Order Qty])) * SUM([Grain(SC-Orders SL Update).Order Intake HC]))
         [Backlog Intake RC] = ((([vSchedQty] - [vInvRemain]) / SUM([Grain(SC-Orders SL Update).Order Qty])) * SUM([Grain(SC-Orders SL Update).Order Intake RC])) */
      END IF
   END IF
   [vPrevKey] = [vOrdKey]
   IF [vWriteRecord] = 'X' THEN 
      WRITERECORD
   END IF
ELSE 
   PRINT 'Order NOT FOUND:'
   PRINT 'Order Key ' + [vOrdKey]
END IF