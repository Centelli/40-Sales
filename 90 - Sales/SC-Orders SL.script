FUNCTION [CheckValue]([Input] as Varchar(21)) as Float
  IF [Input] IS NOT NULL THEN
    IF (SUBSTRING([Input],LENGTH([Input])-1,LENGTH([Input]))) = '-' THEN
     return float(SUBSTRING([Input],0,LENGTH([Input])-1)) * -1
    ELSE
      return float([Input])
    END IF
  ELSE
    RETURN float(0.00)
  END IF
End function 

Dim [vSalesDoc] as Varchar(10)
Dim [vSalesItem] as Varchar(6)
Dim [vSalesOrg] as Varchar(10)
Dim [vSalesDate] as Date
Dim [vSalesCurr] as Varchar(10)
Dim [vOrderNetVBAP] as Float
Dim [vOrderQtyVBAP] as Float
Dim [vOrderNet] as Float
Dim [vOrderQty] as Float
Dim [vInvNetSalesDC] as Float
Dim [vInvQty] as Float
Dim [vChangeDate] as date
Dim [vVBKD_KURSK] as Float
Dim [vVBAP_WAVWR] as Float
Dim [vSchedLineQty] as Float
Dim [vMatKey] as Varchar(18)
DIM [vSchedQty] as Float
DIM [vPrevKey] as Varchar(16) = null
DIM [vOrdKey] as Varchar(16) 
DIM [vInvRemain] as Float
Dim [vMultiplier] as FLOAT

Dim [vOrderNetHC] as Float
Dim [vVBAP_WAVWRHC] as Float

Dim [vOrderNetGC] as Float
Dim [vVBAP_WAVWRGC] as Float

PRINT '1'

[vSalesDoc] = [VBAK_VBAP_VBEP.VBAP_VBELN]
[vSalesItem] = [VBAK_VBAP_VBEP.VBAP_POSNR]
[vSalesOrg] = [VBAK_VBAP_VBEP.VBAK_VKORG]
[vSalesCurr] = [VBAK_VBAP_VBEP.VBAP_WAERK]

IF [BD.VBKD_VBELN] IS NOT NULL THEN
[vVBKD_KURSK] = [CheckValue]([BD.VBKD_KURSK])
[vSalesDate] = [BD.VBKD_PRSDT]
ELSEIF [VBAK_VBAP_VBEP.VBKD_KURSK] IS NOT NULL THEN
[vVBKD_KURSK] = [CheckValue]([VBAK_VBAP_VBEP.VBKD_KURSK])
[vSalesDate] = [VBAK_VBAP_VBEP.VBKD_PRSDT]
ELSE
PRINT 'ERROR Order: '+[vSalesDoc]+' VBKD_KURSK IS NULL - SET TO 1'
[vVBKD_KURSK] = 1.00
[vSalesDate] = [VBAK_VBAP_VBEP.VBKD_PRSDT]
END IF
/* Costs should be negative */
[vVBAP_WAVWR] = IFNULL(FLOAT([CheckValue]([VBAK_VBAP_VBEP.VBAP_WAVWR])),0.00)*-1

/* Map to lookup VC Items */
DIM [mVCItems] AS MAP(Varchar(18),Varchar(18)) = SELECT [SC-Item.Item Key], [SC-Item.Item Key] FROM [SC-Item] WHERE [SC-Item.Item Type] = 'ZKMA'

Dim [v_rate_home_to_chf] as Float
Dim [v_rate_chf_to_reg] as Float

// HUB-648: Change of sign for Credit memo request
IF [VBAK_VBAP_VBEP.VBAK_AUART] IN ('ZG2', 'ZG2M') then
 [vMultiplier] = -1.00
else
 [vMultiplier] = 1.00
end if

  [vOrderNetVBAP] = [CheckValue]([VBAK_VBAP_VBEP.VBAP_NETWR])
  // Credit and Debit Memos do not have KWMENG so take ZMENG
  IF [VBAK_VBAP_VBEP.VBAK_AUART] IN ('ZL2','ZG2') THEN
    [vOrderQtyVBAP] = (ifnull(FLOAT([CheckValue]([VBAK_VBAP_VBEP.VBAP_ZMENG])),0.00)*(ifnull(FLOAT([CheckValue]([VBAK_VBAP_VBEP.VBAP_UMVKZ])),0.00)/ifnull(FLOAT([CheckValue]([VBAK_VBAP_VBEP.VBAP_UMVKN])),0.00)))
  ELSE
    [vOrderQtyVBAP] = (ifnull(FLOAT([CheckValue]([VBAK_VBAP_VBEP.VBAP_KWMENG])),0.00)*(ifnull(FLOAT([CheckValue]([VBAK_VBAP_VBEP.VBAP_UMVKZ])),0.00)/ifnull(FLOAT([CheckValue]([VBAK_VBAP_VBEP.VBAP_UMVKN])),0.00)))
  END IF
/*
Item Key manipulation for VC items 
*/  
IF [mVCItems]([VBAK_VBAP_VBEP.VBAP_MATNR]) IS NOT NULL THEN 
  [vMatKey]=[VBAK_VBAP_VBEP.VBAP_MATKL]+''+SUBSTRING([VBAK_VBAP_VBEP.VBAP_MATNR],LENGTH([VBAK_VBAP_VBEP.VBAP_MATNR])-9,LENGTH([VBAK_VBAP_VBEP.VBAP_MATNR]))
ELSE 
  [vMatKey]=[VBAK_VBAP_VBEP.VBAP_MATNR]
END IF  
PRINT '2'
PRINT '[VBAK_VBAP_VBEP.VBAP_VBELN]: '+[VBAK_VBAP_VBEP.VBAP_VBELN]+' [VBAK_VBAP_VBEP.VBAP_POSNR]: '+[VBAK_VBAP_VBEP.VBAP_POSNR]+' [VBAK_VBAP_VBEP.VBEP_ETENR]: '+[VBAK_VBAP_VBEP.VBEP_ETENR]
/*
PRINT '[vSalesCurr]: '+[vSalesCurr]
PRINT '[vVBAP_STCUR]: '+[vVBAP_STCUR]
PRINT '[SC-TCURF.TCURF_FFACT]: '+[SC-TCURF.TCURF_FFACT]
PRINT '[SC-TCURF.TCURF_TFACT]: '+[SC-TCURF.TCURF_TFACT]
*/

// USE TCURF DATA to apply SAP multiplier, applied to DC to HC Ex RATE
IF IFNULL([SC-TCURF.TCURF_FFACT],'0') <> '0' AND IFNULL([SC-TCURF.TCURF_TFACT],'0') <> '0' THEN
 [vVBKD_KURSK] = [vVBKD_KURSK]/(IFNULL(FLOAT([SC-TCURF.TCURF_FFACT]),0.00)/FLOAT([SC-TCURF.TCURF_TFACT]))
ELSEIF [SC-TCURF.TCURF_TFACT] = '0' THEN
 [vVBKD_KURSK] = [vVBKD_KURSK]/FLOAT([SC-TCURF.TCURF_FFACT])
ELSE
 [vVBKD_KURSK] = [vVBKD_KURSK]
END IF
  [vOrderNet] = ifnull([vOrderNetVBAP],0.00)
  [vOrderQty] = ifnull([vOrderQtyVBAP],0.00)
  // Credit and Debit Memos do not have schedule lines
  IF [VBAK_VBAP_VBEP.VBAK_AUART] IN ('ZL2','ZG2') THEN
    [vSchedLineQty] = ifnull([vOrderQtyVBAP],0.00)
  ELSE
// HUB-595 --> Change quantity from confirmed quantity (VBEP_LMENG) to ordered quantity (VBEP_WMENG)
    [vSchedLineQty] = IFNULL(FLOAT([CheckValue]([VBAK_VBAP_VBEP.VBEP_WMENG])),0.00)
  END IF
/* 
  If a reason for rejection is set, then following logic applies:
    ABGRU = ZL --> No change
    ABGRU is not blank, then open order quantity is cancelled and order net = delivered qty
*/
DIM [mInvQty] as Map(Varchar(16), Float) = SELECT [Grain(SC-Invoices).# SI Reference SO Key], SUM([Grain(SC-Invoices).Invoice Qty]) FROM [Grain(SC-Invoices)] WHERE [Grain(SC-Invoices).Bill Type Key] = 'ZF2'
DIM [mInvNetSalesDC] as Map(Varchar(16), Float) = SELECT [Grain(SC-Invoices).# SI Reference SO Key], SUM([Grain(SC-Invoices).Net Sales DC]) FROM [Grain(SC-Invoices)] WHERE [Grain(SC-Invoices).Bill Type Key] = 'ZF2'

[vOrdKey]=[VBAK_VBAP_VBEP.VBAP_VBELN]+''+[VBAK_VBAP_VBEP.VBAP_POSNR]

if [VBAK_VBAP_VBEP.VBAP_ABGRU] is not null and [VBAK_VBAP_VBEP.VBAP_ABGRU] <> 'ZL' then
  [vInvQty] = [mInvQty]([VBAK_VBAP_VBEP.VBAP_VBELN]+''+[VBAK_VBAP_VBEP.VBAP_POSNR])
  [vInvNetSalesDC] = [mInvNetSalesDC]([VBAK_VBAP_VBEP.VBAP_VBELN]+''+[VBAK_VBAP_VBEP.VBAP_POSNR])
  print 'In reason for rejection. Invoiced Qty: ' + [vInvQty]
  [vOrderNet] = ifnull([vInvNetSalesDC],0.00)
  [vOrderQty] = ifnull([vInvQty],0.00)
ELSEIF [VBAK_VBAP_VBEP.VBAP_ABGRU] is not null and [VBAK_VBAP_VBEP.VBAP_ABGRU] = 'ZL'
  [vSchedQty] = ifnull([vSchedLineQty],0.00)
  print 'In reason for rejection. vSchedQty: ' + [vSchedQty]
  print '[vOrdKey]:'+[vOrdKey]+' [vPrevKey]:'+[vPrevKey]
  IF [vPrevKey] IS NOT NULL THEN
   IF [vPrevKey] = [vOrdKey] THEN
    IF [vInvRemain] IS NULL THEN
     [vInvRemain]=0.0
    END IF
    IF [vInvRemain] >= [vSchedQty] THEN
     [vSchedLineQty]=ifnull([vSchedQty],0.00)
     [vInvRemain]=([vInvRemain] - [vSchedQty])
    ELSE
     [vSchedLineQty]=ifnull([vInvRemain],0.00)
     [vInvRemain]=0.0
    END IF 
	PRINT '2.1 [vInvRemain]:'+[vInvRemain]+' [vInvQty]:'+[vInvQty]+' [vInvNetSalesDC]:'+[vInvNetSalesDC]
   ELSE
    [vInvRemain] = [mInvQty]([VBAK_VBAP_VBEP.VBAP_VBELN]+''+[VBAK_VBAP_VBEP.VBAP_POSNR])
    [vInvQty] = [mInvQty]([VBAK_VBAP_VBEP.VBAP_VBELN]+''+[VBAK_VBAP_VBEP.VBAP_POSNR])
	[vOrderQty]=ifnull([vInvQty],0.00)
	[vInvNetSalesDC] = [mInvNetSalesDC]([VBAK_VBAP_VBEP.VBAP_VBELN]+''+[VBAK_VBAP_VBEP.VBAP_POSNR])
	[vOrderNet]=ifnull([vInvNetSalesDC],0.00)
	IF [vInvRemain] IS NULL THEN
     [vInvRemain]=0.0
    END IF
    IF [vInvRemain] >= [vSchedQty] THEN
     [vSchedLineQty]=ifnull([vSchedQty],0.00)
     [vInvRemain]=([vInvRemain] - [vSchedQty])
    ELSE
     [vSchedLineQty]=ifnull([vInvRemain],0.00)
     [vInvRemain]=0.0
    END IF 
    PRINT '2.2 [vInvRemain]:'+[vInvRemain]+' [vInvQty]:'+[vInvQty]+' [vInvNetSalesDC]:'+[vInvNetSalesDC]
   END IF
  ELSE /* Handle first record when [vPrevKey] IS NULL */
   [vInvRemain] = [mInvQty]([VBAK_VBAP_VBEP.VBAP_VBELN]+''+[VBAK_VBAP_VBEP.VBAP_POSNR])
   [vInvQty] = [mInvQty]([VBAK_VBAP_VBEP.VBAP_VBELN]+''+[VBAK_VBAP_VBEP.VBAP_POSNR])
   [vOrderQty]=ifnull([vInvQty],0.00)
   [vInvNetSalesDC] = [mInvNetSalesDC]([VBAK_VBAP_VBEP.VBAP_VBELN]+''+[VBAK_VBAP_VBEP.VBAP_POSNR])
   [vOrderNet]=ifnull([vInvNetSalesDC],0.00)
   IF [vInvRemain] IS NULL THEN
    [vInvRemain]=0.0
   END IF
   IF [vInvRemain] >= [vSchedQty] THEN
    [vSchedLineQty]=ifnull([vSchedQty],0.00)
    [vInvRemain]=([vInvRemain] - [vSchedQty])
   ELSE
    [vSchedLineQty]=ifnull([vInvRemain],0.00)
    [vInvRemain]=0.0
   END IF 
   PRINT '2.3 [vInvRemain]:'+[vInvRemain]+' [vInvQty]:'+[vInvQty]+' [vInvNetSalesDC]:'+[vInvNetSalesDC]
  END IF
  [vPrevKey]=[vOrdKey]
  PRINT '2.4 [vSchedLineQty]:'+[vSchedLineQty]
end if

  [Sales Order Number]=[VBAK_VBAP_VBEP.VBAP_VBELN]
  [Sales Order Item]=[VBAK_VBAP_VBEP.VBAP_POSNR]
  [Sales Order ScL Line]=[VBAK_VBAP_VBEP.VBEP_ETENR]
  [Sales Order Key]=[VBAK_VBAP_VBEP.VBAP_VBELN]+''+[VBAK_VBAP_VBEP.VBAP_POSNR]
  [SO Date]=[VBAK_VBAP_VBEP.VBAK_AUDAT]
  [SO Document Category]=[VBAK_VBAP_VBEP.VBAK_VBTYP]
  [SO Document Type]=[VBAK_VBAP_VBEP.VBAK_AUART]
  [Sales Org Key]=[VBAK_VBAP_VBEP.VBAK_VKORG]
  [Comp Code Key] = [VBAK_VBAP_VBEP.VBAK_BUKRS_VF]
  [Distr Channel]=[VBAK_VBAP_VBEP.VBAK_VTWEG]
  [Sales Office Key]=[VBAK_VBAP_VBEP.VBAK_VKBUR]
  [SO Doc Condition]=[VBAK_VBAP_VBEP.VBAK_KNUMV]
  [Customer Key]=[VBAK_VBAP_VBEP.VBAK_KUNNR]
  [SO Header Change Date]=[VBAK_VBAP_VBEP.VBAK_AEDAT]
  [Item Key]=[vMatKey]
  [Item category]=[VBAK_VBAP_VBEP.VBAP_PSTYV]
  [Rejection Reason Key]=[VBAK_VBAP_VBEP.VBAP_ABGRU]
  [Base Unit]=[VBAK_VBAP_VBEP.VBAP_MEINS]
  [Division Key]=[VBAK_VBAP_VBEP.VBAP_SPART]
  [Order Qty]=[vOrderQty] * [vMultiplier]
  [Plant]=[VBAK_VBAP_VBEP.VBAP_WERKS]
  [SO Item Cost]=[vVBAP_WAVWR] * [vMultiplier]
  [Requirement Type Key] = [VBAK_VBAP_VBEP.VBAP_BEDAE]
  [Object Number] = [VBAK_VBAP_VBEP.VBAP_OBJNR]
  [Delivery Customer Key]=[VBAK_VBAP_VBEP.VBPA_KUNNR]
  [ScL Delivery Date] = [VBAK_VBAP_VBEP.VBEP_EDATU]
  [ScL Category] = [VBAK_VBAP_VBEP.VBEP_ETTYP]
  [ScL Type] = [VBAK_VBAP_VBEP.VBEP_ETART]
  [ScL Requirement Type] = [VBAK_VBAP_VBEP.VBEP_BDART]
  [ScL Quantity] = [vSchedLineQty] * [vMultiplier]
  print 'Order Qty: ' + ([vOrderQty] * [vMultiplier])
  [Security Key] = 'N' + [VBAK_VBAP_VBEP.VBAK_VKORG] + '' + [VBAK_VBAP_VBEP.VBAP_SPART] + '' + [VBAK_VBAP_VBEP.VBAK_KUNNR]
  
  PRINT '2.1'
  PRINT [VBAK_VBAP_VBEP.VBAP_AEDAT]
  PRINT [VBAK_VBAP_VBEP.VBAK_AEDAT]
  PRINT [VBAK_VBAP_VBEP.VBAP_ERDAT]
  
  /* Changed on Date or Created Date */
  IF [VBAK_VBAP_VBEP.VBAP_AEDAT] IS NOT NULL THEN
    IF [VBAK_VBAP_VBEP.VBAK_AEDAT] IS NOT NULL THEN
      IF [VBAK_VBAP_VBEP.VBAP_AEDAT] > [VBAK_VBAP_VBEP.VBAK_AEDAT] THEN
        [vChangeDate] = [VBAK_VBAP_VBEP.VBAP_AEDAT]
      ELSE
        [vChangeDate] = [VBAK_VBAP_VBEP.VBAK_AEDAT]
      END IF
    ELSE
      [vChangeDate] = [VBAK_VBAP_VBEP.VBAP_AEDAT]
    END IF
  ELSE 
    IF [VBAK_VBAP_VBEP.VBAK_AEDAT] IS NOT NULL THEN
      IF [VBAK_VBAP_VBEP.VBAP_ERDAT] > [VBAK_VBAP_VBEP.VBAK_AEDAT] THEN
        [vChangeDate] = [VBAK_VBAP_VBEP.VBAP_ERDAT]
      ELSE
        [vChangeDate] = [VBAK_VBAP_VBEP.VBAK_AEDAT]
    ELSE
      [vChangeDate] = [VBAK_VBAP_VBEP.VBAP_ERDAT]
    END IF
  END IF

  PRINT [vChangeDate]

  [Analysis Date]=[vChangeDate]
  [Change Date]=[vChangeDate]
  
  [Pricing Date]=[VBAK_VBAP_VBEP.VBKD_PRSDT]
  [CustArea Key]=[VBAK_VBAP_VBEP.VBAK_KUNNR]+''+[VBAK_VBAP_VBEP.VBAK_VKORG]
  [SO Order Delivery Status]=[VBAK_VBAP_VBEP.VBUP_LFSTA]
  [SO Item Delivery Status]=[VBAK_VBAP_VBEP.VBUP_LFGSA]
  [SO Item Rejection Status]=[VBAK_VBAP_VBEP.VBUP_ABSTA]
  [SO Item Overall Status]=[VBAK_VBAP_VBEP.VBUP_GBSTA]

  PRINT '3'
  [v_rate_home_to_chf] = 1
  IF [LEVEL(Company.Company).Comp Currency Key] <> 'CHF' THEN
    [v_rate_home_to_chf] = [HomeRates.Exchange Rate]
  END IF
PRINT '[SC-Company.Comp Currency Key]:'+[LEVEL(Company.Company).Comp Currency Key]+' [v_rate_home_to_chf] ='+[v_rate_home_to_chf] 
  [v_rate_chf_to_reg] = 1
  IF [tbl_dim_sales_region.regional_currency_code] <> 'CHF' THEN
    [v_rate_chf_to_reg] = [RegRates.Exchange Rate]
  END IF
PRINT '[SC-Sales Office.RC Currency Key]:'+[tbl_dim_sales_region.regional_currency_code]+' [v_rate_chf_to_reg] ='+[v_rate_chf_to_reg]   

  IF [v_rate_home_to_chf] IS NULL THEN
    [v_rate_home_to_chf] = 1
    PRINT 'ISSUE WITH '+[VBAK_VBAP_VBEP.VBAP_VBELN]+' RATE FOR v_rate_home_to_chf '+[LEVEL(Company.Company).Comp Currency Key]+' NOT FOUND - SET TO 1'
  END IF
  
  IF [v_rate_chf_to_reg] IS NULL THEN
    [v_rate_chf_to_reg] = 1
    PRINT 'ISSUE WITH '+[VBAK_VBAP_VBEP.VBAP_VBELN]+' RATE FOR v_rate_chf_to_reg '+[tbl_dim_sales_region.regional_currency_code]+' NOT FOUND - SET TO 1'
  END IF  

  /* Populate the Values in all three required Currencies  */
  [Currency Key DC]=[vSalesCurr]
  [Ex Rate DC]=1
  [Order Intake DC]=[vOrderNet] * [vMultiplier]
  IF [VBAK_VBAP_VBEP.VBAP_WAVWR] IS NOT NULL THEN
   [SO Item Cost DC]=[vVBAP_WAVWR]* [vMultiplier]
  END IF

  PRINT '[vOrderNet]: '+[vOrderNet]
  PRINT 'DC: '+[vSalesCurr]+' [vVBKD_KURSK]: '+[vVBKD_KURSK]

  [Currency Key HC] = [LEVEL(Company.Company).Comp Currency Key]

  IF [vVBKD_KURSK] > FLOAT(0.00) THEN
    [Ex Rate HC]=[vVBKD_KURSK]
    [vOrderNetHC]=FLOAT([vOrderNet]*[vVBKD_KURSK])
    IF [VBAK_VBAP_VBEP.VBAP_WAVWR] IS NOT NULL THEN
     [vVBAP_WAVWRHC]=FLOAT([vVBAP_WAVWR])*[vVBKD_KURSK]
    END IF
   ELSEIF [vVBKD_KURSK] < FLOAT(0.00) THEN
    [Ex Rate HC]=FLOAT(1/[vVBKD_KURSK]*-1)
    [vOrderNetHC]=FLOAT([vOrderNet]/([vVBKD_KURSK]*-1))
    IF [VBAK_VBAP_VBEP.VBAP_WAVWR] IS NOT NULL THEN
     [vVBAP_WAVWRHC]=FLOAT([vVBAP_WAVWR]/([vVBKD_KURSK]*-1))
    END IF   
   END IF
   [Order Intake HC]=[vOrderNetHC]* [vMultiplier]
   [SO Item Cost HC]=[vVBAP_WAVWRHC]* [vMultiplier]

   PRINT '4'
   PRINT 'HC: '+[LEVEL(Company.Company).Comp Currency Key]+' [vOrderNetHC]: '+[vOrderNetHC]
   
  [Currency Key GC] = 'CHF'
  IF [LEVEL(Company.Company).Comp Currency Key] = 'CHF' THEN
    [Ex Rate GC] = 1
    [vOrderNetGC] = [vOrderNetHC]
    IF [VBAK_VBAP_VBEP.VBAP_WAVWR] IS NOT NULL THEN
     [vVBAP_WAVWRGC]=[vVBAP_WAVWRHC]
    END IF
  ELSE
    [Ex Rate GC] = [v_rate_home_to_chf]
    [vOrderNetGC] = [vOrderNetHC]*[v_rate_home_to_chf]
    IF [VBAK_VBAP_VBEP.VBAP_WAVWR] IS NOT NULL THEN
     [vVBAP_WAVWRGC]=[vVBAP_WAVWRHC]*[v_rate_home_to_chf]
    END IF
  END IF
  [Order Intake GC] = [vOrderNetGC]* [vMultiplier]
  [SO Item Cost GC] = [vVBAP_WAVWRGC] * [vMultiplier]
  
  PRINT '[vOrderNetGC]: '+[vOrderNetGC]
  
  [Currency Key RC] = [tbl_dim_sales_region.regional_currency_code]
  IF [tbl_dim_sales_region.regional_currency_code] = 'CHF' THEN
    [Ex Rate RC] = 1
    [Order Intake RC] = [vOrderNetGC] * [vMultiplier]
    IF [VBAK_VBAP_VBEP.VBAP_WAVWR] IS NOT NULL THEN
     [SO Item Cost RC]=[vVBAP_WAVWRGC] * [vMultiplier]
    END IF
  ELSE
    [Ex Rate RC] = FLOAT(1/[v_rate_chf_to_reg])
    [Order Intake RC] = FLOAT([vOrderNetGC]/[v_rate_chf_to_reg]) * [vMultiplier]
    IF [VBAK_VBAP_VBEP.VBAP_WAVWR] IS NOT NULL THEN
     [SO Item Cost RC]=FLOAT([vVBAP_WAVWRGC]/[v_rate_chf_to_reg]) * [vMultiplier]
    END IF
  END IF
  
  PRINT '5'
  
  [Current Record] = 1
  [DelMarker] = [VBAK_VBAP_VBEP.VBAP_VBELN]+'_'+[VBAK_VBAP_VBEP.VBAP_POSNR]+'_CURRENT'
  [Source] = 'SAP ECC'
  [RecType] = 'New Record'

/*
Change 19/10/18 RK
Do not write records for Customer Type 'Group'
*/  
IF [Level(Customer.Customer).Customer Type] <> 'Group' THEN
WRITERECORD
END IF